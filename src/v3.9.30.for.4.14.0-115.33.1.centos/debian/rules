#!/usr/bin/make -f
# -*- makefile -*-
# Sample debian/rules that uses debhelper.
# This file was originally written by Joey Hess and Craig Small.
# As a special exception, when this file is copied by dh-make into a
# dh-make output file, you may use that output file without restriction.
# This special exception was added by Craig Small in version 0.37 of dh-make.
#
# This version is for a hypothetical package that can build a kernel modules
# architecture-dependant package via make-kpkg, as well as an
# architecture-independent module source package, and other packages
# either dep/indep for things like common files or userspace components
# needed for the kernel modules.

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

WITH_DKMS ?= 1
WITH_OFED ?= 1
MLXNUMC = $(shell grep ^processor /proc/cpuinfo | wc -l)
NJOBS ?= $(shell if [ $(MLXNUMC) -lt 16 ]; then echo $(MLXNUMC); else echo 16; fi)

pname:=mlnx-nfsrdma
psource:=$(pname)-source
ifeq ($(WITH_DKMS),1)
pdkms:=$(pname)-dkms
else
pdkms:=$(pname)-modules
endif
ifeq ($(WITH_OFED),1)
ifeq ($(WITH_DKMS),1)
extra_package_deps:=,mlnx-ofed-kernel-dkms
else
extra_package_deps:=,mlnx-ofed-kernel-modules
endif
ofaparam:=
else
extra_package_deps:=
ofaparam:=OFA_DIR=
endif

pversion := $(shell dpkg-parsechangelog | sed -n 's/^Version: *\([^-]\+\)-.\+/\1/p')
dir_pversion := $(shell echo 99.${pversion} | tr : -)
prel := $(shell dpkg-parsechangelog | sed -n 's/^Version: *\([^-]\+\)-\(.\+\)/\2/p')

export INSTALL_MOD_DIR:=updates
export INSTALL_MOD_PATH:=$(CURDIR)/debian/$(pdkms)

DIST_NAME := $(shell lsb_release -si)
DIST_RELEASE := $(DIST_NAME)/$(shell lsb_release -sc)


KVER ?= $(shell uname -r)
KVER1 = $(shell echo $(KVER) | sed -e 's/_/-/g')
K_BUILD ?= "/lib/modules/$(KVER)/build"

%:
ifeq ($(WITH_DKMS),1)
	dh $@ --with dkms
else
	dh $@
endif

override_dh_auto_clean:

override_dh_auto_configure:

override_dh_auto_build:
ifneq ($(WITH_DKMS),1)
	@echo Building for $(KVER)
	make clean || true
	make $(ofaparam) -j$(NJOBS) KVER=$(KVER) K_BUILD=$(K_BUILD)
endif

override_dh_auto_test:

override_dh_auto_install:
	make build-info.txt
ifneq ($(WITH_DKMS),1)
	mkdir -p $(INSTALL_MOD_PATH)/etc/depmod.d
	cp $(CURDIR)/debian/depmod.conf $(INSTALL_MOD_PATH)/etc/depmod.d/nfsrdma.conf
	make install $(ofaparam) INSTALL_MOD_DIR=$(INSTALL_MOD_DIR) INSTALL_MOD_PATH=$(INSTALL_MOD_PATH) KERNELRELEASE=$(KVER) KVER=$(KVER) K_BUILD=$(K_BUILD)
	find $(INSTALL_MOD_PATH) \( -type f -a -name "modules.*" \) -delete
endif
	# For dkms
ifeq ($(WITH_DKMS),1)
	dh_installdirs -p$(pdkms)  usr/src/$(pname)-$(dir_pversion)
	cp -a ofa-patches inbox-compare compare-debuginfo.sh debian/$(pdkms)/usr/src/$(pname)-$(dir_pversion)
	cp makefile debian/$(pdkms)/usr/src/$(pname)-$(dir_pversion)
	cp Makefile debian/$(pdkms)/usr/src/$(pname)-$(dir_pversion)
	cp dkms.conf debian/$(pdkms)/usr/src/$(pname)-$(dir_pversion)
	cp build-info.h debian/$(pdkms)/usr/src/$(pname)-$(dir_pversion)
	cp -a bundle debian/$(pdkms)/usr/src/$(pname)-$(dir_pversion)
	cp ofa-filter.sh debian/$(pdkms)/usr/src/$(pname)-$(dir_pversion)
	cp _dkms-run.sh debian/$(pdkms)/usr/src/$(pname)-$(dir_pversion)

	# Force DKMS to install our modules.
	# This is mostly needed for modules that do not have a version number info, as DKMS
	# will compare their srcversion field, which does not really say which module is newer.
	dh_installdirs -p$(pdkms)  usr/share/dkms/modules_to_force_install/
	echo "$(pname)" > debian/$(pdkms)/usr/share/dkms/modules_to_force_install/$(pname).force
endif
	mkdir -p debian/$(pdkms)/usr/share/mlnx-nfsrdma/
	cp build-info.txt debian/$(pdkms)/usr/share/mlnx-nfsrdma/

override_dh_installinit:


ifneq ($(WITH_DKMS),1)
override_dh_gencontrol:
	dh_gencontrol -- -v$(pversion)-$(prel).kver.$(KVER1) -Vextra-package-deps=$(extra_package_deps)
else
override_dh_gencontrol:
	dh_gencontrol -- -Vextra-package-deps=$(extra_package_deps)
endif

ifneq ($(MLNX_KO_NO_STRIP),1)
ifneq ($(WITH_DKMS),1)
override_dh_strip:
	dh_strip
	find debian -name '*.ko' | xargs strip -g
endif
endif
