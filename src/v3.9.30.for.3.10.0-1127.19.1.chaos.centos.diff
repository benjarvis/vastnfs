diff --git a/bundle/fs/nfs/nfs3proc.c b/bundle/fs/nfs/nfs3proc.c
index 17a82e770..933d671e0 100644
--- a/bundle/fs/nfs/nfs3proc.c
+++ b/bundle/fs/nfs/nfs3proc.c
@@ -135,6 +135,11 @@ nfs3_proc_setattr(struct dentry *dentry, struct nfs_fattr *fattr,
 	};
 	int	status;
 
+	msg.rpc_groups.ngroups = 1;
+	msg.rpc_groups.groups[0] = dentry->d_inode->i_gid;
+	if (sattr->ia_valid & ATTR_GID)
+		msg.rpc_groups.groups[msg.rpc_groups.ngroups++] = sattr->ia_gid;
+
 	dprintk("NFS call  setattr\n");
 	if (sattr->ia_valid & ATTR_FILE)
 		msg.rpc_cred = nfs_file_cred(sattr->ia_file);
@@ -167,6 +172,9 @@ nfs3_proc_lookup(struct inode *dir, struct qstr *name,
 	};
 	int			status;
 
+	msg.rpc_groups.ngroups = 1;
+	msg.rpc_groups.groups[0] = dir->i_gid;
+
 	dprintk("NFS call  lookup %s\n", name->name);
 	res.dir_attr = nfs_alloc_fattr();
 	if (res.dir_attr == NULL)
@@ -333,6 +341,8 @@ nfs3_proc_create(struct inode *dir, struct dentry *dentry, struct iattr *sattr,
 		goto out;
 
 	data->msg.rpc_proc = &nfs3_procedures[NFS3PROC_CREATE];
+	data->msg.rpc_groups.ngroups = 1;
+	data->msg.rpc_groups.groups[0] = dir->i_gid;
 	data->arg.create.fh = NFS_FH(dir);
 	data->arg.create.name = dentry->d_name.name;
 	data->arg.create.len = dentry->d_name.len;
@@ -414,6 +424,9 @@ nfs3_proc_remove(struct inode *dir, struct qstr *name)
 	};
 	int status = -ENOMEM;
 
+	msg.rpc_groups.ngroups = 1;
+	msg.rpc_groups.groups[0] = dir->i_gid;
+
 	dprintk("NFS call  remove %s\n", name->name);
 	res.dir_attr = nfs_alloc_fattr();
 	if (res.dir_attr == NULL)
@@ -492,6 +505,9 @@ nfs3_proc_link(struct inode *inode, struct inode *dir, struct qstr *name)
 	};
 	int status = -ENOMEM;
 
+	msg.rpc_groups.ngroups = 1;
+	msg.rpc_groups.groups[0] = dir->i_gid;
+
 	dprintk("NFS call  link %s\n", name->name);
 	res.fattr = nfs_alloc_fattr();
 	res.dir_attr = nfs_alloc_fattr();
@@ -524,6 +540,8 @@ nfs3_proc_symlink(struct inode *dir, struct dentry *dentry, struct page *page,
 	if (data == NULL)
 		goto out;
 	data->msg.rpc_proc = &nfs3_procedures[NFS3PROC_SYMLINK];
+	data->msg.rpc_groups.ngroups = 1;
+	data->msg.rpc_groups.groups[0] = dir->i_gid;
 	data->arg.symlink.fromfh = NFS_FH(dir);
 	data->arg.symlink.fromname = dentry->d_name.name;
 	data->arg.symlink.fromlen = dentry->d_name.len;
@@ -555,6 +573,8 @@ nfs3_proc_mkdir(struct inode *dir, struct dentry *dentry, struct iattr *sattr)
 		goto out;
 
 	data->msg.rpc_proc = &nfs3_procedures[NFS3PROC_MKDIR];
+	data->msg.rpc_groups.ngroups = 1;
+	data->msg.rpc_groups.groups[0] = dir->i_gid;
 	data->arg.mkdir.fh = NFS_FH(dir);
 	data->arg.mkdir.name = dentry->d_name.name;
 	data->arg.mkdir.len = dentry->d_name.len;
@@ -585,6 +605,8 @@ nfs3_proc_rmdir(struct inode *dir, struct qstr *name)
 		.rpc_argp	= &arg,
 	};
 	int status = -ENOMEM;
+	msg.rpc_groups.ngroups = 1;
+	msg.rpc_groups.groups[0] = dir->i_gid;
 
 	dprintk("NFS call  rmdir %s\n", name->name);
 	dir_attr = nfs_alloc_fattr();
@@ -675,6 +697,8 @@ nfs3_proc_mknod(struct inode *dir, struct dentry *dentry, struct iattr *sattr,
 		goto out;
 
 	data->msg.rpc_proc = &nfs3_procedures[NFS3PROC_MKNOD];
+	data->msg.rpc_groups.ngroups = 1;
+	data->msg.rpc_groups.groups[0] = dir->i_gid;
 	data->arg.mknod.fh = NFS_FH(dir);
 	data->arg.mknod.name = dentry->d_name.name;
 	data->arg.mknod.len = dentry->d_name.len;
diff --git a/bundle/fs/nfs/nfs4namespace.c b/bundle/fs/nfs/nfs4namespace.c
index 0c386123b..354c34b05 100644
--- a/bundle/fs/nfs/nfs4namespace.c
+++ b/bundle/fs/nfs/nfs4namespace.c
@@ -182,7 +182,7 @@ static struct rpc_clnt *nfs_find_best_sec(struct rpc_clnt *clnt,
 				* flavor. This is mostly for RPC_AUTH_GSS
 				* where cr_init obtains a gss context
 				*/
-				cred = rpcauth_lookupcred(new->cl_auth, 0);
+				cred = rpcauth_lookupcred(new->cl_auth, NULL, 0);
 				if (IS_ERR(cred)) {
 					rpc_shutdown_client(new);
 					continue;
diff --git a/bundle/fs/nfs/unlink.c b/bundle/fs/nfs/unlink.c
index b4790d8ee..f86227163 100644
--- a/bundle/fs/nfs/unlink.c
+++ b/bundle/fs/nfs/unlink.c
@@ -442,6 +442,12 @@ nfs_async_rename(struct inode *old_dir, struct inode *new_dir,
 	msg.rpc_resp = &data->res;
 	msg.rpc_cred = data->cred;
 
+	if (NFS_PROTO(old_dir)->version <= 3) {
+		msg.rpc_groups.ngroups = 2;
+		msg.rpc_groups.groups[0] = old_dir->i_gid;
+		msg.rpc_groups.groups[1] = new_dir->i_gid;
+	}
+
 	/* set up nfs_renamedata */
 	data->old_dir = old_dir;
 	ihold(old_dir);
diff --git a/bundle/include/linux/sunrpc/auth.h b/bundle/include/linux/sunrpc/auth.h
index 2a2cceb52..464c61afc 100644
--- a/bundle/include/linux/sunrpc/auth.h
+++ b/bundle/include/linux/sunrpc/auth.h
@@ -13,6 +13,7 @@
 #include <linux/sunrpc/sched.h>
 #include <linux/sunrpc/msg_prot.h>
 #include <linux/sunrpc/xdr.h>
+#include <linux/sunrpc/groups.h>
 
 #include <linux/atomic.h>
 #include <linux/refcount.h>
@@ -32,12 +33,12 @@
  */
 #define UNX_MAXNODENAME	__NEW_UTS_LEN
 #define UNX_CALLSLACK	(21 + XDR_QUADLEN(UNX_MAXNODENAME))
-#define UNX_NGROUPS	16
 
 struct rpcsec_gss_info;
 
 struct auth_cred {
 	const struct cred *cred;
+	struct rpc_groups rg;
 	const char *principal;	/* If present, this is a machine credential */
 };
 
@@ -161,7 +162,7 @@ int			rpcauth_get_gssinfo(rpc_authflavor_t,
 				struct rpcsec_gss_info *);
 struct rpc_cred *	rpcauth_lookup_credcache(struct rpc_auth *, struct auth_cred *, int, gfp_t);
 void			rpcauth_init_cred(struct rpc_cred *, const struct auth_cred *, struct rpc_auth *, const struct rpc_credops *);
-struct rpc_cred *	rpcauth_lookupcred(struct rpc_auth *, int);
+struct rpc_cred *	rpcauth_lookupcred(struct rpc_auth *, struct rpc_groups *, int);
 void			put_rpccred(struct rpc_cred *);
 int			rpcauth_marshcred(struct rpc_task *task,
 					  struct xdr_stream *xdr);
diff --git a/bundle/include/linux/sunrpc/groups.h b/bundle/include/linux/sunrpc/groups.h
new file mode 100644
index 000000000..e4da9fb9f
--- /dev/null
+++ b/bundle/include/linux/sunrpc/groups.h
@@ -0,0 +1,21 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * linux/include/linux/sunrpc/groups.h
+ *
+ * Handling for Unix groups
+ */
+
+#ifndef _LINUX_SUNRPC_GROUPS_H
+#define _LINUX_SUNRPC_GROUPS_H
+
+#include <linux/atomic.h>
+#include <linux/uidgid.h>
+
+#define UNX_NGROUPS	16
+
+struct rpc_groups {
+	int	ngroups;
+	kgid_t	groups[UNX_NGROUPS];
+};
+
+#endif /* _LINUX_SUNRPC_GROUPS_H */
diff --git a/bundle/include/linux/sunrpc/sched.h b/bundle/include/linux/sunrpc/sched.h
index bbcefd3f5..56e83c6d0 100644
--- a/bundle/include/linux/sunrpc/sched.h
+++ b/bundle/include/linux/sunrpc/sched.h
@@ -16,6 +16,7 @@
 #include <linux/spinlock.h>
 #include <linux/workqueue.h>
 #include <linux/sunrpc/xdr.h>
+#include <linux/sunrpc/groups.h>
 
 /*
  * This is the actual RPC procedure call info.
@@ -26,6 +27,7 @@ struct rpc_message {
 	void *			rpc_argp;	/* Arguments */
 	void *			rpc_resp;	/* Result */
 	const struct cred *	rpc_cred;	/* Credentials */
+	struct rpc_groups       rpc_groups;     /* Groups filter */
 };
 
 struct rpc_call_ops;
diff --git a/bundle/include/trace/events/sunrpc.h b/bundle/include/trace/events/sunrpc.h
index 14cb1977c..c20caa6c1 100644
--- a/bundle/include/trace/events/sunrpc.h
+++ b/bundle/include/trace/events/sunrpc.h
@@ -725,6 +725,105 @@ TRACE_EVENT(rpc_stats_latency,
 		__entry->backlog, __entry->rtt, __entry->execute)
 );
 
+# define TRACE_READ_KGID(rg,i) \
+    ((i) < (rg)->ngroups ? (int)from_kgid(&init_user_ns, (rg)->groups[i]) : -1)
+
+TRACE_EVENT(rpc_task_auth_group_trimmed,
+	TP_PROTO(
+		const struct rpc_task *task,
+		struct rpc_groups *rg,
+		int n,
+		struct auth_cred *acred
+	),
+
+	TP_ARGS(task, rg, n, acred),
+
+	TP_STRUCT__entry(
+		__field(unsigned int, task_id)
+		__field(unsigned int, client_id)
+		__field(u32, xid)
+		__field(int, version)
+		__string(progname, task->tk_client->cl_program->name)
+		__string(procname, rpc_proc_name(task))
+		__field(int, rg_ngroups)
+		__field(int, rg_gid0)
+		__field(int, rg_gid1)
+		__field(int, rg_gid2)
+		__field(int, acred_ngroups)
+		__field(int, acred_gid0)
+		__field(int, acred_gid1)
+		__field(int, acred_gid2)
+	),
+
+	TP_fast_assign(
+		if (task) {
+		       __entry->client_id = task->tk_client->cl_clid;
+		       __entry->task_id = task->tk_pid;
+		       __entry->xid = be32_to_cpu(task->tk_rqstp->rq_xid);
+	 	       __entry->version = task->tk_client->cl_vers;
+		       __assign_str(progname, task->tk_client->cl_program->name)
+		       __assign_str(procname, rpc_proc_name(task))
+		} else {
+		       __entry->client_id = 0;
+		       __entry->task_id = 0;
+		       __entry->xid = 0;
+	 	       __entry->version = 0;
+		       __assign_str(progname, "-")
+		       __assign_str(procname, "-")
+		}
+		__entry->rg_ngroups = rg->ngroups;
+		__entry->rg_gid0 = TRACE_READ_KGID(rg, 0);
+		__entry->rg_gid1 = TRACE_READ_KGID(rg, 1);
+		__entry->rg_gid2 = TRACE_READ_KGID(rg, 2);
+		__entry->acred_ngroups = n;
+		__entry->acred_gid0 = TRACE_READ_KGID(&acred->rg, 0);
+		__entry->acred_gid1 = TRACE_READ_KGID(&acred->rg, 1);
+		__entry->acred_gid2 = TRACE_READ_KGID(&acred->rg, 2);
+	),
+
+	TP_printk("task:%u@%d xid=0x%08x %sv%d %s rg %d{%d,%d,%d} acred %d{%d,%d,%d}",
+		__entry->task_id, __entry->client_id, __entry->xid,
+		__get_str(progname), __entry->version, __get_str(procname),
+		__entry->rg_ngroups, __entry->rg_gid0, __entry->rg_gid1, __entry->rg_gid2,
+		__entry->acred_ngroups, __entry->acred_gid0, __entry->acred_gid1, __entry->acred_gid2)
+);
+
+TRACE_EVENT(rpc_auth_group_trimmed,
+	TP_PROTO(
+		struct rpc_groups *rg,
+		int n,
+		struct auth_cred *acred
+	),
+
+	TP_ARGS(rg, n, acred),
+
+	TP_STRUCT__entry(
+		__field(int, rg_ngroups)
+		__field(int, rg_gid0)
+		__field(int, rg_gid1)
+		__field(int, rg_gid2)
+		__field(int, acred_ngroups)
+		__field(int, acred_gid0)
+		__field(int, acred_gid1)
+		__field(int, acred_gid2)
+	),
+
+	TP_fast_assign(
+		__entry->rg_ngroups = rg->ngroups;
+		__entry->rg_gid0 = TRACE_READ_KGID(rg, 0);
+		__entry->rg_gid1 = TRACE_READ_KGID(rg, 1);
+		__entry->rg_gid2 = TRACE_READ_KGID(rg, 2);
+		__entry->acred_ngroups = n;
+		__entry->acred_gid0 = TRACE_READ_KGID(&acred->rg, 0);
+		__entry->acred_gid1 = TRACE_READ_KGID(&acred->rg, 1);
+		__entry->acred_gid2 = TRACE_READ_KGID(&acred->rg, 2);
+	),
+
+	TP_printk("%d{%d,%d,%d} acred %d{%d,%d,%d}",
+		__entry->rg_ngroups, __entry->rg_gid0, __entry->rg_gid1, __entry->rg_gid2,
+		__entry->acred_ngroups, __entry->acred_gid0, __entry->acred_gid1, __entry->acred_gid2)
+);
+
 TRACE_EVENT(rpc_xdr_overflow,
 	TP_PROTO(
 		const struct xdr_stream *xdr,
diff --git a/bundle/net/sunrpc/auth.c b/bundle/net/sunrpc/auth.c
index bdb12cf55..541079efb 100644
--- a/bundle/net/sunrpc/auth.c
+++ b/bundle/net/sunrpc/auth.c
@@ -18,9 +18,19 @@
 #include <linux/sunrpc/gss_api.h>
 #include <linux/spinlock.h>
 #include <linux/old-kernel.h>
+#include <linux/user_namespace.h>
 
 #include <trace/events/sunrpc.h>
 
+#if IS_ENABLED(CONFIG_SUNRPC_DEBUG)
+# define RPCDBG_FACILITY	RPCDBG_AUTH
+#endif
+
+#if IS_ENABLED(CONFIG_SUNRPC_DEBUG)
+# define RG(rg,i)		((i) < (rg).ngroups ? (int)from_kgid(&init_user_ns, (rg).groups[i]) : -1)
+#endif
+
+static void rpcauth_add_groups(struct rpc_task *task, struct auth_cred *acred, struct rpc_groups *rg);
 
 #define RPC_CREDCACHE_DEFAULT_HASHBITS	(4)
 struct rpc_cred_cache {
@@ -581,7 +591,8 @@ out:
 EXPORT_SYMBOL_GPL(rpcauth_lookup_credcache);
 
 struct rpc_cred *
-rpcauth_lookupcred(struct rpc_auth *auth, int flags)
+rpcauth_task_lookupcred(struct rpc_task *task,
+			struct rpc_auth *auth, struct rpc_groups *rg, int flags)
 {
 	struct auth_cred acred;
 	struct rpc_cred *ret;
@@ -589,9 +600,18 @@ rpcauth_lookupcred(struct rpc_auth *auth, int flags)
 
 	memset(&acred, 0, sizeof(acred));
 	acred.cred = cred;
+	rpcauth_add_groups(task, &acred, rg);
 	ret = auth->au_ops->lookup_cred(auth, &acred, flags);
+
+	dprintk("RPC:      cred %p\n", ret);
 	return ret;
 }
+
+struct rpc_cred *
+rpcauth_lookupcred(struct rpc_auth *auth, struct rpc_groups *rg, int flags)
+{
+	return rpcauth_task_lookupcred(NULL, auth, rg, flags);
+}
 EXPORT_SYMBOL_GPL(rpcauth_lookupcred);
 
 void
@@ -602,7 +622,6 @@ rpcauth_init_cred(struct rpc_cred *cred, const struct auth_cred *acred,
 	INIT_LIST_HEAD(&cred->cr_lru);
 	refcount_set(&cred->cr_count, 1);
 	cred->cr_auth = auth;
-	cred->cr_flags = 0;
 	cred->cr_ops = ops;
 	cred->cr_expire = jiffies;
 	cred->cr_cred = get_cred(acred->cred);
@@ -663,15 +682,16 @@ rpcauth_bind_machine_cred(struct rpc_task *task, int lookupflags)
 }
 
 static struct rpc_cred *
-rpcauth_bind_new_cred(struct rpc_task *task, int lookupflags)
+rpcauth_bind_new_cred(struct rpc_task *task, struct rpc_groups *rg, int lookupflags)
 {
 	struct rpc_auth *auth = task->tk_client->cl_auth;
 
-	return rpcauth_lookupcred(auth, lookupflags);
+	return rpcauth_lookupcred(auth, rg, lookupflags);
 }
 
 static int
-rpcauth_bindcred(struct rpc_task *task, const struct cred *cred, int flags)
+rpcauth_bindcred(struct rpc_task *task, const struct cred *cred,
+		 struct rpc_groups *rg, int flags)
 {
 	struct rpc_rqst *req = task->tk_rqstp;
 	struct rpc_cred *new = NULL;
@@ -686,9 +706,10 @@ rpcauth_bindcred(struct rpc_task *task, const struct cred *cred, int flags)
 	if (task->tk_op_cred)
 		/* Task must use exactly this rpc_cred */
 		new = get_rpccred(task->tk_op_cred);
-	else if (cred != NULL && cred != &machine_cred)
+	else if (cred != NULL && cred != &machine_cred) {
+		rpcauth_add_groups(task, &acred, rg);
 		new = auth->au_ops->lookup_cred(auth, &acred, lookupflags);
-	else if (cred == &machine_cred)
+	} else if (cred == &machine_cred)
 		new = rpcauth_bind_machine_cred(task, lookupflags);
 
 	/* If machine cred couldn't be bound, try a root cred */
@@ -699,7 +720,7 @@ rpcauth_bindcred(struct rpc_task *task, const struct cred *cred, int flags)
 	else if (flags & RPC_TASK_NULLCREDS)
 		new = authnull_ops.lookup_cred(NULL, NULL, 0);
 	else
-		new = rpcauth_bind_new_cred(task, lookupflags);
+		new = rpcauth_bind_new_cred(task, rg, lookupflags);
 	if (IS_ERR(new))
 		return PTR_ERR(new);
 	put_rpccred(req->rq_cred);
@@ -707,6 +728,47 @@ rpcauth_bindcred(struct rpc_task *task, const struct cred *cred, int flags)
 	return 0;
 }
 
+/*
+ * Generic function for adding groups to acred. When there are too many then
+ * try to be smart by picking only the relevant ones from our secondary group list.
+ */
+static void rpcauth_add_groups(struct rpc_task *task, struct auth_cred *acred, struct rpc_groups *rg)
+{
+	int i, n, ngroups;
+	kgid_t gid;
+	const struct cred *cred = current_cred();
+
+	ngroups = cred->group_info->ngroups;
+
+	n = ngroups;
+	if (n <= UNX_NGROUPS)
+		rg = NULL;
+	else
+		n = UNX_NGROUPS;	/* too many groups for AUTH_UNIX */
+	if (rg) {
+		n = 0;	/* pick the few relevant groups we're a member of */
+		for (i = 0; i < rg->ngroups; ++i) {
+			gid = rg->groups[i];
+			if (in_group_p(gid))
+				acred->rg.groups[n++] = gid;
+		}
+		acred->rg.ngroups = n;
+		if (task) {
+			trace_rpc_task_auth_group_trimmed(task, rg, n, acred);
+		} else {
+			trace_rpc_auth_group_trimmed(rg, n, acred);
+		}
+		dprintk("RPC:      %s(): rg=%d:%d,%d,%d -> %d:%d,%d,%d\n", __func__,
+			rg->ngroups, RG(*rg, 0), RG(*rg, 1), RG(*rg, 2),
+			n, RG(acred->rg, 0), RG(acred->rg, 1), RG(acred->rg, 2));
+	} else {
+		dprintk("RPC:      %s(): ngroups=%d\n", __func__, ngroups);
+		for (i = 0; i < n; ++i)
+			acred->rg.groups[i] = GROUP_AT(cred->group_info, i);
+		acred->rg.ngroups = n;
+	}
+}
+
 void
 put_rpccred(struct rpc_cred *cred)
 {
@@ -854,7 +916,11 @@ rpcauth_refreshcred(struct rpc_task *task)
 
 	cred = task->tk_rqstp->rq_cred;
 	if (cred == NULL) {
-		err = rpcauth_bindcred(task, task->tk_msg.rpc_cred, task->tk_flags);
+		struct rpc_groups *rg = &task->tk_msg.rpc_groups;
+		if (rg->ngroups == 0)
+			rg = NULL;
+		err = rpcauth_bindcred(task, task->tk_msg.rpc_cred, rg,
+				       task->tk_flags);
 		if (err < 0)
 			goto out;
 		cred = task->tk_rqstp->rq_cred;
diff --git a/bundle/net/sunrpc/auth_unix.c b/bundle/net/sunrpc/auth_unix.c
index 28fbc8393..528dff654 100644
--- a/bundle/net/sunrpc/auth_unix.c
+++ b/bundle/net/sunrpc/auth_unix.c
@@ -11,11 +11,15 @@
 #include <linux/types.h>
 #include <linux/sched.h>
 #include <linux/module.h>
-#include <linux/mempool.h>
 #include <linux/sunrpc/clnt.h>
 #include <linux/sunrpc/auth.h>
 #include <linux/user_namespace.h>
 
+struct unx_cred {
+	struct rpc_cred		uc_base;
+	kgid_t			uc_gid;
+	kgid_t			uc_gids[UNX_NGROUPS];
+};
 
 #if IS_ENABLED(CONFIG_SUNRPC_DEBUG)
 # define RPCDBG_FACILITY	RPCDBG_AUTH
@@ -23,7 +27,6 @@
 
 static struct rpc_auth		unix_auth;
 static const struct rpc_credops	unix_credops;
-static mempool_t		*unix_pool;
 
 static struct rpc_auth *
 unx_create(const struct rpc_auth_create_args *args, struct rpc_clnt *clnt)
@@ -35,6 +38,16 @@ unx_create(const struct rpc_auth_create_args *args, struct rpc_clnt *clnt)
 static void
 unx_destroy(struct rpc_auth *auth)
 {
+	dprintk("RPC:       destroying UNIX authenticator %p\n", auth);
+	rpcauth_clear_credcache(auth->au_credcache);
+}
+
+static int
+unx_hash_cred(struct auth_cred *acred, unsigned int hashbits)
+{
+	return hash_64(from_kgid(&init_user_ns, acred->cred->fsgid) |
+		((u64)from_kuid(&init_user_ns, acred->cred->fsuid) <<
+			(sizeof(gid_t) * 8)), hashbits);
 }
 
 /*
@@ -43,20 +56,53 @@ unx_destroy(struct rpc_auth *auth)
 static struct rpc_cred *
 unx_lookup_cred(struct rpc_auth *auth, struct auth_cred *acred, int flags)
 {
-	struct rpc_cred *ret = mempool_alloc(unix_pool, GFP_NOFS);
+	return rpcauth_lookup_credcache(auth, acred, flags, GFP_NOFS);
+}
+
+static struct rpc_cred *
+unx_create_cred(struct rpc_auth *auth, struct auth_cred *acred, int flags, gfp_t gfp)
+{
+	struct unx_cred	*cred;
+	unsigned int groups = acred->rg.ngroups;
+	unsigned int i;
+
+	dprintk("RPC:       allocating UNIX cred for uid %d gid %d\n",
+			from_kuid(&init_user_ns, acred->cred->fsuid),
+			from_kgid(&init_user_ns, acred->cred->fsgid));
+
+	dprintk("RPC:       allocating UNIX cred for uid %d gid %d\n",
+			from_kuid(&init_user_ns, acred->cred->fsuid),
+			from_kgid(&init_user_ns, acred->cred->fsgid));
+
+	if (!(cred = kmalloc(sizeof(*cred), gfp)))
+		return ERR_PTR(-ENOMEM);
 
-	rpcauth_init_cred(ret, acred, auth, &unix_credops);
-	ret->cr_flags = 1UL << RPCAUTH_CRED_UPTODATE;
-	return ret;
+	rpcauth_init_cred(&cred->uc_base, acred, auth, &unix_credops);
+	cred->uc_base.cr_flags = 1UL << RPCAUTH_CRED_UPTODATE;
+
+	cred->uc_gid = acred->cred->fsgid;
+	for (i = 0; i < groups; i++)
+		cred->uc_gids[i] = acred->rg.groups[i];
+	if (i < UNX_NGROUPS)
+		cred->uc_gids[i] = INVALID_GID;
+
+	return &cred->uc_base;
 }
 
 static void
-unx_free_cred_callback(struct rcu_head *head)
+unx_free_cred(struct unx_cred *unx_cred)
 {
-	struct rpc_cred *rpc_cred = container_of(head, struct rpc_cred, cr_rcu);
+	dprintk("RPC:       unx_free_cred %p\n", unx_cred);
+	put_cred(unx_cred->uc_base.cr_cred);
+	kfree(unx_cred);
+}
 
-	put_cred(rpc_cred->cr_cred);
-	mempool_free(rpc_cred, unix_pool);
+static void
+unx_free_cred_callback(struct rcu_head *head)
+{
+	struct unx_cred *unx_cred = container_of(head, struct unx_cred, uc_base.cr_rcu);
+	dprintk("RPC:       unx_free_cred %p\n", unx_cred);
+	unx_free_cred(unx_cred);
 }
 
 static void
@@ -66,32 +112,25 @@ unx_destroy_cred(struct rpc_cred *cred)
 }
 
 /*
- * Match credentials against current the auth_cred.
+ * Match credentials against current process creds.
+ * The root_override argument takes care of cases where the caller may
+ * request root creds (e.g. for NFS swapping).
  */
 static int
-unx_match(struct auth_cred *acred, struct rpc_cred *cred, int flags)
+unx_match(struct auth_cred *acred, struct rpc_cred *rcred, int flags)
 {
-	unsigned int groups = 0;
+	struct unx_cred	*cred = container_of(rcred, struct unx_cred, uc_base);
+	unsigned int groups = acred->rg.ngroups;
 	unsigned int i;
 
-	if (cred->cr_cred == acred->cred)
-		return 1;
-
-	if (!uid_eq(cred->cr_cred->fsuid, acred->cred->fsuid) || !gid_eq(cred->cr_cred->fsgid, acred->cred->fsgid))
-		return 0;
-
-	if (acred->cred->group_info != NULL)
-		groups = acred->cred->group_info->ngroups;
-	if (groups > UNX_NGROUPS)
-		groups = UNX_NGROUPS;
-	if (cred->cr_cred->group_info == NULL)
-		return groups == 0;
-	if (groups != cred->cr_cred->group_info->ngroups)
+	if (!uid_eq(cred->uc_base.cr_cred->fsuid, acred->cred->fsuid) || !gid_eq(cred->uc_gid, acred->cred->fsgid))
 		return 0;
 
 	for (i = 0; i < groups ; i++)
-		if (!gid_eq(GROUP_AT(cred->cr_cred->group_info, i), GROUP_AT(acred->cred->group_info, i)))
+		if (!gid_eq(cred->uc_gids[i], acred->rg.groups[i]))
 			return 0;
+	if (groups < UNX_NGROUPS && gid_valid(cred->uc_gids[groups]))
+		return 0;
 	return 1;
 }
 
@@ -103,10 +142,9 @@ static int
 unx_marshal(struct rpc_task *task, struct xdr_stream *xdr)
 {
 	struct rpc_clnt	*clnt = task->tk_client;
-	struct rpc_cred	*cred = task->tk_rqstp->rq_cred;
+	struct unx_cred	*cred = container_of(task->tk_rqstp->rq_cred, struct unx_cred, uc_base);
 	__be32		*p, *cred_len, *gidarr_len;
 	int		i;
-	struct group_info *gi = cred->cr_cred->group_info;
 	struct user_namespace *userns = clnt->cl_cred ?
 		clnt->cl_cred->user_ns : &init_user_ns;
 
@@ -124,13 +162,13 @@ unx_marshal(struct rpc_task *task, struct xdr_stream *xdr)
 	p = xdr_reserve_space(xdr, 3 * sizeof(*p));
 	if (!p)
 		goto marshal_failed;
-	*p++ = cpu_to_be32(from_kuid_munged(userns, cred->cr_cred->fsuid));
-	*p++ = cpu_to_be32(from_kgid_munged(userns, cred->cr_cred->fsgid));
+	*p++ = cpu_to_be32(from_kuid_munged(userns, cred->uc_base.cr_cred->fsuid));
+	*p++ = cpu_to_be32(from_kgid_munged(userns, cred->uc_gid));
 
 	gidarr_len = p++;
-	if (gi)
-		for (i = 0; i < UNX_NGROUPS && i < gi->ngroups; i++)
-			*p++ = cpu_to_be32(from_kgid_munged(userns, GROUP_AT(gi, i)));
+	for (i = 0; i < UNX_NGROUPS && gid_valid(cred->uc_gids[i]); i++)
+		*p++ = htonl((u32) from_kgid(&init_user_ns, cred->uc_gids[i]));
+
 	*gidarr_len = cpu_to_be32(p - gidarr_len - 1);
 	*cred_len = cpu_to_be32((p - cred_len - 1) << 2);
 	p = xdr_reserve_space(xdr, (p - gidarr_len - 1) << 2);
@@ -194,13 +232,12 @@ unx_validate(struct rpc_task *task, struct xdr_stream *xdr)
 
 int __init rpc_init_authunix(void)
 {
-	unix_pool = mempool_create_kmalloc_pool(16, sizeof(struct rpc_cred));
-	return unix_pool ? 0 : -ENOMEM;
+	return rpcauth_init_credcache(&unix_auth);
 }
 
 void rpc_destroy_authunix(void)
 {
-	mempool_destroy(unix_pool);
+	rpcauth_destroy_credcache(&unix_auth);
 }
 
 const struct rpc_authops authunix_ops = {
@@ -209,7 +246,9 @@ const struct rpc_authops authunix_ops = {
 	.au_name	= "UNIX",
 	.create		= unx_create,
 	.destroy	= unx_destroy,
+	.hash_cred	= unx_hash_cred,
 	.lookup_cred	= unx_lookup_cred,
+	.crcreate	= unx_create_cred,
 };
 
 static
diff --git a/bundle/net/sunrpc/clnt.c b/bundle/net/sunrpc/clnt.c
index 0b929af1b..8dd63751e 100644
--- a/bundle/net/sunrpc/clnt.c
+++ b/bundle/net/sunrpc/clnt.c
@@ -1473,12 +1473,16 @@ static void
 rpc_task_set_rpc_message(struct rpc_task *task, const struct rpc_message *msg)
 {
 	if (msg != NULL) {
+		const struct rpc_groups *rg = &msg->rpc_groups;
+
 		task->tk_msg.rpc_proc = msg->rpc_proc;
 		task->tk_msg.rpc_argp = msg->rpc_argp;
 		task->tk_msg.rpc_resp = msg->rpc_resp;
 		task->tk_msg.rpc_cred = msg->rpc_cred;
 		if (!(task->tk_flags & RPC_TASK_CRED_NOREF))
 			get_cred(task->tk_msg.rpc_cred);
+		if (rg->ngroups != 0)
+			task->tk_msg.rpc_groups = *rg;
 	}
 }
 
